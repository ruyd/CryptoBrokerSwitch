Order Types
--------------------------
All orders require a symbol. All other fields are optional except when otherwise specified.

These are the valid ordTypes:

Limit: The default order type. Specify an orderQty and price.

Market: A traditional Market order. A Market order will execute until filled or your bankruptcy price is reached, at which point it will cancel.

MarketWithLeftOverAsLimit: A market order that, after eating through the order book as far as permitted by available margin, will become a limit order.
The difference between this type and Market only affects the behavior in thin books. Upon reaching the deepest possible price, if there is quantity left over,
a Market order will cancel the remaining quantity. MarketWithLeftOverAsLimit will keep the remaining quantity in the books as a Limit.

Stop: A Stop Market order. Specify an orderQty and stopPx. When the stopPx is reached, the order will be entered into the book.
On sell orders, the order will trigger if the triggering price is lower than the stopPx. On buys, higher.
Note: Stop orders do not consume margin until triggered. Be sure that the required margin is available in your account so that it may trigger fully.
Close Stops don't require an orderQty. See Execution Instructions below.

StopLimit: Like a Stop Market, but enters a Limit order instead of a Market order. Specify an orderQty, stopPx, and price.

MarketIfTouched: Similar to a Stop, but triggers are done in the opposite direction. Useful for Take Profit orders.

LimitIfTouched: As above; use for Take Profit Limit orders.


Execution Instructions
-------------------------------
The following execInsts are supported. If using multiple, separate with a comma (e.g. LastPrice,Close).

ParticipateDoNotInitiate: Also known as a Post-Only order. If this order would have executed on placement, it will cancel instead.
AllOrNone: Valid only for hidden orders (displayQty: 0). Use to only execute if the entire order would fill.
MarkPrice, LastPrice, IndexPrice: Used by stop and if-touched orders to determine the triggering price. Use only one. By default, 'MarkPrice' is used. 
Also used for Pegged orders to define the value of 'LastPeg'.
ReduceOnly: A 'ReduceOnly' order can only reduce your position, not increase it. If you have a 'ReduceOnly' limit order that rests in the order book while 
the position is reduced by other orders, then its order quantity will be amended down or canceled. If there are multiple 'ReduceOnly' orders the least 
agresssive will be amended first.
Close: 'Close' implies 'ReduceOnly'. A 'Close' order will cancel other active limit orders with the same side and symbol if the open quantity exceeds the 
current position. This is useful for stops: by canceling these orders, a 'Close' Stop is ensured to have the margin required to execute, and can only 
execute up to the full size of your position. If orderQty is not specified, a 'Close' order has an orderQty equal to your current position's size.
Note that a Close order without an orderQty requires a side, so that BitMEX knows if it should trigger above or below the stopPx.
Linked Orders
Linked Orders are an advanced capability. It is very powerful, but its use requires careful coding and testing. Please follow this document carefully and use the Testnet Exchange while developing.

BitMEX offers four advanced Linked Order types:
------------------------------------------
OCO: One Cancels the Other. A very flexible version of the standard Stop / Take Profit technique. Multiple orders may be linked together using a single 
clOrdLinkID. Send a contingencyType of OneCancelsTheOther on the orders. The first order that fully or partially executes (or activates for Stop orders) 
will cancel all other orders with the same clOrdLinkID.

OTO: One Triggers the Other. Send a contingencyType of 'OneTriggersTheOther' on the primary order and then subsequent orders with the same clOrdLinkID 
will be not be triggered until the primary order fully executes.

OUOA: One Updates the Other Absolute. Send a contingencyType of 'OneUpdatesTheOtherAbsolute' on the orders. Then as one order has a execution, other orders 
with the same clOrdLinkID will have their order quantity amended down by the execution quantity.

OUOP: One Updates the Other Proportional. Send a contingencyType of 'OneUpdatesTheOtherProportional' on the orders. Then as one order has a execution, 
other orders with the same clOrdLinkID will have their order quantity reduced proportionally by the fill percentage.

Trailing Stops
---------------------------------------
You may use pegPriceType of 'TrailingStopPeg' to create Trailing Stops. The pegged stopPx will move as the market moves away from the peg, and freeze as 
the market moves toward it.

To use, combine with pegOffsetValue to set the stopPx of your order. The peg is set to the triggering price specified in the execInst (default 'MarkPrice').
Use a negative offset for stop-sell and buy-if-touched orders.

Requires ordType: 'Stop', 'StopLimit', 'MarketIfTouched', 'LimitIfTouched'.


timeInForce	string	Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to 'GoodTillCancel' for 'Limit',
'StopLimit', 'LimitIfTouched', and 'MarketWithLeftOverAsLimit' orders.	[optional]

execInst	string	Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, IndexPrice, LastPrice, 
Close, ReduceOnly, Fixed. 'AllOrNone' instruction requires `displayQty` to be 0. 'MarkPrice', 'IndexPrice' or 'LastPrice' instruction valid for 'Stop', 
'StopLimit', 'MarketIfTouched', and 'LimitIfTouched' orders.	[optional]

contingencyType	string	Optional contingency type for use with `clOrdLinkID`. Valid options: OneCancelsTheOther, OneTriggersTheOther, 
OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.